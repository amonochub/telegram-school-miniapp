import json
import logging
import asyncio
import sys
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from config import Config
from database import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=Config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db_manager = DatabaseManager()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class FeedbackStates(StatesGroup):
    waiting_for_feedback = State()

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Ç–æ–Ω–æ–º"""
    user = message.from_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user:
        db_user = db_manager.get_user_by_telegram_id(user.id)
        if not db_user:
            db_manager.register_user(
                user.id, 
                user.username or '', 
                user.first_name or '', 
                user.last_name or ''
            )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üè´ –û—Ç–∫—Ä—ã—Ç—å —à–∫–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
            web_app=WebAppInfo(url=Config.WEBAPP_URL)
        )]
    ])
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name if user else '–¥—Ä—É–≥'}! üëã\n\n"
        f"üéì **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {Config.SCHOOL_NAME}!**\n\n"
        "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–π —à–∫–æ–ª—å–Ω–æ–π —Å–µ–º—å–µ! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n\n"
        "‚Ä¢ üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ üìù –£–∑–Ω–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
        "‚Ä¢ üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏\n"
        "‚Ä¢ üì¢ –ß–∏—Ç–∞—Ç—å —à–∫–æ–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! ‚¨áÔ∏è",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    try:
        if message.web_app_data and message.web_app_data.data:
            data = json.loads(message.web_app_data.data)
            action = data.get('action')
            role = data.get('role', 'student')
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App: {action}, —Ä–æ–ª—å: {role}")
            
            if action == 'open_section':
                await handle_section_request(message, data.get('section'), role)
            elif action == 'feedback':
                await handle_feedback_request(message, data)
            elif action == 'main_menu':
                await start_command(message)
            else:
                await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ ü§î\n–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è üòÖ")
                
    except json.JSONDecodeError:
        await message.answer("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ üîß")



async def handle_section_request(message: types.Message, section: str, role: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ä–∞–∑–¥–µ–ª–∞–º —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Ç–æ–Ω–æ–º"""
    responses = {
        'schedule': "üìÖ **–î–µ—Ä–∂–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!**\n\n"
                   "**10–ê –∫–ª–∞—Å—Å:**\n"
                   "1. 8:00-8:45 - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–∫–∞–±. 201) üë®‚Äçüè´\n"
                   "2. 8:55-9:40 - –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–∫–∞–±. 105) üë©‚Äçüè´\n"
                   "3. 9:50-10:35 - –ò—Å—Ç–æ—Ä–∏—è (–∫–∞–±. 301) üë®‚Äçüè´\n"
                   "4. 10:55-11:40 - –§–∏–∑–∏–∫–∞ (–∫–∞–±. 205) üë©‚Äçüè´\n"
                   "5. 11:50-12:35 - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–∫–∞–±. 102) üë©‚Äçüè´\n\n"
                   "–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! üåü",
        
        'homework': "üìù **–£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è!**\n\n"
                   "**–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞** (–¥–æ 09.12):\n"
                   "‚Ä¢ –°—Ç—Ä. 127, ‚Ññ‚Ññ 15-20\n"
                   "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Å—è –∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π! üìä\n\n"
                   "**–†—É—Å—Å–∫–∏–π —è–∑—ã–∫** (–¥–æ 08.12):\n"
                   "‚Ä¢ –°–æ—á–∏–Ω–µ–Ω–∏–µ 200-250 —Å–ª–æ–≤ ‚úçÔ∏è\n\n"
                   "**–ò—Å—Ç–æ—Ä–∏—è** (–¥–æ 10.12):\n"
                   "‚Ä¢ –ü–∞—Ä–∞–≥—Ä–∞—Ñ 12, –≤–æ–ø—Ä–æ—Å—ã 1-7 üìö\n\n"
                   "–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è! üí™",
        
        'grades': "üìä **–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏:**\n\n"
                 "**–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:** 4, 5, 4 (—Å—Ä–µ–¥–Ω–∏–π: 4.3) üìà\n"
                 "**–†—É—Å—Å–∫–∏–π —è–∑—ã–∫:** 5, 4, 5 (—Å—Ä–µ–¥–Ω–∏–π: 4.7) üåü\n"
                 "**–ò—Å—Ç–æ—Ä–∏—è:** 4, 4, 3 (—Å—Ä–µ–¥–Ω–∏–π: 3.7) üìñ\n"
                 "**–§–∏–∑–∏–∫–∞:** 5, 5, 4 (—Å—Ä–µ–¥–Ω–∏–π: 4.7) ‚ö°\n\n"
                 "**–û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: 4.4** üéØ\n\n"
                 "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üëè",
        
        'announcements': "üì¢ **–®–∫–æ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:**\n\n"
                        "üî¥ **–í–ê–ñ–ù–û!** –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
                        "8 –¥–µ–∫–∞–±—Ä—è —Ñ–∏–∑–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ 6 —É—Ä–æ–∫\n\n"
                        "üéâ **–î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π**\n"
                        "15 –¥–µ–∫–∞–±—Ä—è –≤ 15:00 - –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö!\n\n"
                        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ**\n"
                        "20 –¥–µ–∫–∞–±—Ä—è –≤ 18:00\n\n"
                        "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üì±"
    }
    
    response = responses.get(section, "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üîç\n–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª!")
    await message.answer(response, parse_mode='Markdown')

async def handle_feedback_request(message: types.Message,  dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="feedback_suggestion"),
            InlineKeyboardButton(text="‚ùó –ñ–∞–ª–æ–±–∞", callback_data="feedback_complaint")
        ],
        [
            InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å", callback_data="feedback_question"),
            InlineKeyboardButton(text="üëè –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", callback_data="feedback_compliment")
        ]
    ])
    
    await message.answer(
        "üí¨ **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ {Config.SCHOOL_NAME}...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())
